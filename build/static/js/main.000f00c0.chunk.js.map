{"version":3,"sources":["media/icons/sidebar.svg","media/icons/toolbar.svg","media/icons/toggle-off.svg","media/icons/toggle-on.svg","mocks/index.js","actions/emails.ts","reducers/emails.js","actions/sidebar.js","reducers/sidebar.js","reducers/activeEmail.js","reducers/index.js","store/index.js","components/App/connect.ts","components/SideBar/connect.ts","components/SvgIcon/index.tsx","constants/colors.ts","components/SideBarItem/index.tsx","components/SideBar/component.tsx","components/SideBar/index.ts","components/MessageList/connect.ts","constants/fonts.ts","components/MessageListItem/helper-components.ts","components/MessageListItem/index.tsx","components/MessageList/component.tsx","components/MessageList/index.ts","components/MessageView/connect.ts","components/ToolbarButton/index.tsx","components/ToggleButton/helper-components.ts","components/ToggleButton/index.tsx","components/Toolbar/index.tsx","components/ContentArea/index.js","components/MessageView/component.tsx","components/MessageView/index.ts","components/App/component.tsx","components/App/index.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","email","date","Date","from","isRead","getEmails","folder","amount","Array","map","_","i","Object","objectSpread","content","loremIpsum","count","format","paragraphLowerBound","paragraphUpperBound","sentenceLowerBound","sentenceUpperBound","units","id","subject","inboxEmails","sentEmails","draftsEmails","pinsEmails","archiveEmails","emails","concat","setEmails","createAction","setActiveEmail","resetActiveEmail","deleteEmail","setEmailRead","reducer","handleActions","[object Object]","state","payload","newState","slice","find","idx","indexOf","splice","selectSidebarElement","selectedItem","combineReducers","sidebar","activeEmail","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","connect","dispatch","loadData","setTimeout","sidebarElementClick","item","SVG","styled","svg","size","getSprites","category","toolbar","SvgIcon","react_default","a","createElement","xlinkHref","Li","li","selected","SideBarItem","_ref","icon","iconSize","text","others","objectWithoutProperties","components_SvgIcon","SideBarContainer","nav","List","ul","Separator","apps","folders","SideBar","components_SideBarItem","key","onClick","filter","sans","Container","div","LeftColumn","RightColumn","Row1","From","Row2","Row3","Circle","MessageListItem","helper_components_Date","toLocaleDateString","MessageListContainer","MessageList","components_MessageListItem","assign","toggleEmailRead","Button","button","ToolbarButton","Img","img","ToggleButton","Component","constructor","props","super","this","toggled","onClickHandler","bind","componentDidUpdate","prevProps","setState","_this$props","render","helper_components_Container","helper_components_Button","src","toggleOnIcon","toggleOffIcon","Toolbar","onDelete","onToggleRead","Toolbar_Container","components_ToolbarButton","components_ToggleButton","ContentArea","children","ContentArea_Container","Subject","h1","MessageView","component_Container","components_Toolbar","components_ContentArea","AppContainer","App","componentDidMount","components_SideBar","components_MessageList","components_MessageView","ReactDOM","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.000f00c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sidebar.e24bdf00.svg\";","module.exports = __webpack_public_path__ + \"static/media/toolbar.f5413ef4.svg\";","module.exports = __webpack_public_path__ + \"static/media/toggle-off.afdf74b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/toggle-on.172a4aa9.svg\";","import { loremIpsum } from \"lorem-ipsum\";\n\nconst email = {\n  date: new Date(),\n  from: \"vkuschenko@gmail.com\",\n  isRead: false\n};\n\nconst getEmails = (folder, amount) =>\n  [...Array(amount)].map((_, i) => ({\n    ...email,\n    content: loremIpsum({\n      count: 5, // Number of \"words\", \"sentences\", or \"paragraphs\"\n      format: \"plain\", // \"plain\" or \"html\"\n      paragraphLowerBound: 3, // Min. number of sentences per paragraph.\n      paragraphUpperBound: 7, // Max. number of sentences per paragarph.\n      sentenceLowerBound: 5, // Min. number of words per sentence.\n      sentenceUpperBound: 15, // Max. number of words per sentence.\n      units: \"paragraphs\"\n    }),\n    id: i,\n    subject: `${folder} email`,\n    folder\n  }));\n\nexport const inboxEmails = getEmails(\"inbox\", 30);\n\nexport const sentEmails = getEmails(\"sent\", 10);\n\nexport const draftsEmails = getEmails(\"drafts\", 3);\n\nexport const pinsEmails = getEmails(\"pins\", 5);\n\nexport const archiveEmails = getEmails(\"archive\", 100);\n\nexport const emails = inboxEmails\n  .concat(sentEmails)\n  .concat(draftsEmails)\n  .concat(pinsEmails)\n  .concat(archiveEmails);\n","import { Dispatch } from \"redux\";\nimport { createAction } from \"redux-actions\";\nimport { emails } from \"../mocks\";\n\nexport const setEmails = createAction(\"SET_EMAILS\");\n\nexport const fetchEmails: any = () => (dispatch: Dispatch) => {\n  setTimeout(() => dispatch(setEmails(emails)), 1000);\n};\n\nexport const setActiveEmail = createAction(\"SET_ACTIVE_EMAIL\");\n\nexport const resetActiveEmail = createAction(\"RESET_ACTIVE_EMAIL\");\n\nexport const deleteEmail = createAction(\"DELETE_EMAIL\");\n\nexport const setEmailRead = createAction(\"SET_EMAIL_READ\");\n","import { handleActions } from \"redux-actions\";\nimport { setEmails, deleteEmail, setEmailRead } from \"../actions/emails\";\n\nconst defaultState = [];\n\nconst reducer = handleActions(\n  {\n    [setEmails]: (state, { payload }) => payload,\n    [deleteEmail]: (state, { payload }) => {\n      const newState = state.slice();\n      const email = newState.find(({ id }) => id === payload);\n      const idx = newState.indexOf(email);\n      newState.splice(idx, 1);\n      return newState;\n    },\n    [setEmailRead]: (state, { payload }) => {\n      const newState = state.slice();\n      const email = newState.find(({ id }) => id === payload.id);\n      email.isRead = payload.isRead;\n      return newState;\n    }\n  },\n  defaultState\n);\n\nexport default reducer;\n","import { createAction } from \"redux-actions\";\n\nexport const selectSidebarElement = createAction(\"SELECT_SIDEBAR_ELEMENT\");\n","import { handleActions } from \"redux-actions\";\nimport { selectSidebarElement } from \"../actions/sidebar\";\n\n// possible options are:\n// inbox, calendar, sent, drafts, pins, archive\nconst defaultState = {\n  selectedItem: \"inbox\"\n};\n\nconst reducer = handleActions(\n  {\n    [selectSidebarElement]: (state, { payload }) => ({\n      ...state,\n      selectedItem: payload\n    })\n  },\n  defaultState\n);\n\nexport default reducer;\n","import { handleActions } from \"redux-actions\";\nimport { setActiveEmail, resetActiveEmail } from \"../actions/emails\";\n\nconst defaultState = null;\n\nconst reducer = handleActions(\n  {\n    [setActiveEmail]: (state, { payload }) => payload,\n    [resetActiveEmail]: (state, { payload }) => defaultState\n  },\n  defaultState\n);\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport emails from \"./emails\";\nimport sidebar from \"./sidebar\";\nimport activeEmail from \"./activeEmail\";\n\nexport default combineReducers({ emails, sidebar, activeEmail });\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers/index\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","import { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { fetchEmails } from \"../../actions/emails\";\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => ({\n  loadData: () => dispatch(fetchEmails())\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n);\n","import { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { selectSidebarElement } from \"../../actions/sidebar\";\nimport { resetActiveEmail } from \"../../actions/emails\";\n\ninterface Store {\n  sidebar: any;\n}\n\nconst mapStateToProps = ({ sidebar }: Store): any => sidebar;\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => ({\n  sidebarElementClick: (item: any) => {\n    dispatch(selectSidebarElement(item));\n    dispatch(resetActiveEmail());\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport sidebar from \"../../media/icons/sidebar.svg\";\nimport toolbar from \"../../media/icons/toolbar.svg\";\n\ninterface SvgIconProps {\n  category: string;\n  id: string;\n  size?: number;\n}\n\ninterface ISVG {\n  size?: number;\n}\n\nconst SVG = styled.svg<ISVG>`\n  margin: 0.25rem;\n  width: ${({ size }) => (size ? `${size}px` : \"16px\")};\n  height: ${({ size }) => (size ? `${size}px` : \"16px\")};\n`;\n\nconst getSprites = (category: string): string => {\n  if (category === \"sidebar\") return sidebar;\n  if (category === \"toolbar\") return toolbar;\n  return \"\";\n};\n\nconst SvgIcon: React.FC<SvgIconProps> = ({ category, id, size }) => (\n  <SVG size={size}>\n    <use xlinkHref={`${getSprites(category)}#${id}`} />\n  </SVG>\n);\n\nexport default SvgIcon;\n","// Color names generated by using this color analytics online tool\n// https://www.color-blindness.com/color-name-hue/\n\nexport const midnightExpress = \"#1F2633\";\nexport const whiteSmoke = \"#F5F5F5\";\nexport const white = \"#FFFFFF\";\nexport const rhino = \"#464D5C\";\nexport const slateGrey = \"#768091\";\nexport const licorice = \"#2F3845\";\nexport const gainsboro = \"#E3E3E3\";\nexport const stormGrey = \"#797A7D\";\nexport const jaguar = \"#252526\";\nexport const lavender = \"#E8F2FA\";\nexport const lightSkyBlue = \"#8ECAFA\";\nexport const royalBlue = \"#4384D9\";\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SvgIcon from \"../SvgIcon\";\nimport { white, rhino, licorice } from \"../../constants/colors\";\n\ninterface SideBarItemProps {\n  icon?: string;\n  iconSize?: number;\n  text: string;\n  selected?: boolean;\n  onClick?(): void;\n}\n\ninterface ListItemProps {\n  selected?: boolean;\n}\n\nconst Li = styled.li<ListItemProps>`\n  display: flex;\n  align-items: center;\n  height: 2rem;\n  padding-left: 1rem;\n  font-size: 0.875rem;\n  background-color: ${({ selected }) => selected && rhino};\n  color: ${white};\n  cursor: default;\n\n  &:hover {\n    background-color: ${licorice};\n  }\n`;\n\nconst SideBarItem: React.FC<SideBarItemProps> = ({\n  icon,\n  iconSize,\n  text,\n  ...others\n}) => (\n  <Li {...others}>\n    {icon && <SvgIcon category=\"sidebar\" id={icon} size={iconSize} />}\n    {text}\n  </Li>\n);\n\nexport default SideBarItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SideBarItem from \"../SideBarItem\";\nimport { midnightExpress, slateGrey } from \"../../constants/colors\";\n\nconst SideBarContainer = styled.nav`\n  background-color: ${midnightExpress};\n  width: 200px;\n`;\n\nconst List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nconst Separator = styled.li`\n  font-size: 0.75rem;\n  margin: 1rem 0 0 1.25rem;\n  color: ${slateGrey};\n  cursor: default;\n`;\n\nconst apps = [\n  { id: \"inbox\", text: \"INBOX\" },\n  { id: \"calendar\", text: \"CALENDAR\" }\n];\nconst folders = [\n  { id: \"sent\", text: \"Sent\" },\n  { id: \"drafts\", text: \"Drafts\" },\n  { id: \"pins\", text: \"Pins\" },\n  { id: \"archive\", text: \"Archive\" }\n];\n\ninterface SideBarProps {\n  selectedItem?: string;\n  sidebarElementClick?(item: string): void;\n}\n\nconst SideBar: React.FC<SideBarProps> = ({\n  selectedItem = \"inbox\",\n  sidebarElementClick\n}) => (\n  <SideBarContainer>\n    <List>\n      {apps.map(({ id, text }) => (\n        <SideBarItem\n          key={id}\n          icon={id}\n          iconSize={20}\n          text={text}\n          onClick={() => sidebarElementClick && sidebarElementClick(id)}\n          selected={id === selectedItem}\n        />\n      ))}\n      <Separator>Folders</Separator>\n      {folders.map(({ id, text }) => (\n        <SideBarItem\n          key={id}\n          icon={id}\n          text={text}\n          onClick={() => sidebarElementClick && sidebarElementClick(id)}\n          selected={id === selectedItem}\n        />\n      ))}\n    </List>\n  </SideBarContainer>\n);\n\nexport default SideBar;\n","import connect from \"./connect\";\nimport Component from \"./component\";\n\nexport default connect(Component);\n","import { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { setActiveEmail } from \"../../actions/emails\";\n\ninterface Store {\n  emails: any;\n  sidebar: any;\n  activeEmail: number;\n}\n\ninterface Email {\n  folder: string;\n}\n\nconst mapStateToProps = ({ emails, sidebar, activeEmail }: Store): any => ({\n  emails: emails.filter(({ folder }: Email) => folder === sidebar.selectedItem),\n  activeEmail\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => ({\n  setActiveEmail: (id: number): any => dispatch(setActiveEmail(id))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n","export const sans = '\"Roboto\", sans-serif';\n","import styled from \"styled-components\";\nimport { ContainerProps } from \"./types\";\nimport {\n  gainsboro,\n  white,\n  stormGrey,\n  jaguar,\n  lavender,\n  lightSkyBlue,\n  royalBlue\n} from \"../../constants/colors\";\nimport { sans } from \"../../constants/fonts\";\n\nexport const Container = styled.div<ContainerProps>`\n  display: flex;\n  align-items: stretch;\n  padding: 0.5rem 0;\n  width: 100%;\n  border-top: 1px solid ${({ selected }) => (selected ? lightSkyBlue : white)};\n  border-bottom: 1px solid\n    ${({ selected }) => (selected ? lightSkyBlue : gainsboro)};\n  background-color: ${({ selected }) => (selected ? lavender : white)};\n  color: ${jaguar};\n  cursor: default;\n\n  &:hover {\n    background-color: ${lavender};\n  }\n`;\n\nexport const LeftColumn = styled.div`\n  display: flex;\n  justify-content: center;\n  min-width: 2rem;\n`;\n\nexport const RightColumn = styled.div`\n  min-width: 0;\n  margin-right: 1rem;\n`;\n\nexport const Row1 = styled.div`\n  display: flex;\n  align-items: center;\n  font: 700 1rem ${sans};\n  margin-bottom: 0.5rem;\n`;\n\nexport const From = styled.div`\n  width: 100%;\n`;\n\nexport const Date = styled.div`\n  font: 400 0.5rem ${sans};\n  color: ${stormGrey};\n`;\n\nexport const Row2 = styled.div`\n  font: 700 0.75rem ${sans};\n  margin-bottom: 0.5rem;\n`;\n\nexport const Row3 = styled.div`\n  font: 400 0.75rem ${sans};\n  width: 100%;\n  color: ${stormGrey};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const Circle = styled.div`\n  margin-top: 5.5px;\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: ${royalBlue};\n  border-radius: 50%;\n`;\n","import React from \"react\";\nimport {\n  Container,\n  LeftColumn,\n  RightColumn,\n  Row1,\n  From,\n  Date,\n  Row2,\n  Row3,\n  Circle\n} from \"./helper-components\";\nimport { EmailItem } from \"./types\";\n\nconst MessageListItem: React.FC<EmailItem> = ({\n  date,\n  from,\n  subject,\n  content,\n  isRead,\n  selected,\n  onClick\n}) => (\n  <Container selected={selected} onClick={onClick}>\n    <LeftColumn>{!isRead && <Circle />}</LeftColumn>\n    <RightColumn>\n      <Row1>\n        <From>{from}</From>\n        <Date>{date.toLocaleDateString()}</Date>\n      </Row1>\n      <Row2>{subject}</Row2>\n      <Row3>{content}</Row3>\n    </RightColumn>\n  </Container>\n);\n\nexport default MessageListItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { MessageListItemProps } from \"./types\";\nimport MessageListItem from \"../MessageListItem\";\nimport { jaguar } from \"../../constants/colors\";\n\nconst MessageListContainer = styled.div`\n  width: 300px;\n  height: 100vh;\n  border-right: 1px solid ${jaguar};\n  overflow-y: auto;\n`;\n\nconst MessageList: React.FC<MessageListItemProps> = ({\n  emails = [],\n  activeEmail,\n  setActiveEmail\n}) => (\n  <MessageListContainer>\n    {emails.map(email => (\n      <MessageListItem\n        key={email.id}\n        selected={email.id === activeEmail}\n        onClick={() => setActiveEmail && setActiveEmail(email.id)}\n        {...email}\n      />\n    ))}\n  </MessageListContainer>\n);\n\nexport default MessageList;\n","import connect from \"./connect\";\nimport Component from \"./component\";\n\nexport default connect(Component);\n","import { connect } from \"react-redux\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport {\n  deleteEmail,\n  setEmailRead,\n  resetActiveEmail\n} from \"../../actions/emails\";\n\ninterface Store {\n  emails: any;\n  activeEmail: number;\n}\n\nconst mapStateToProps = ({ emails, activeEmail }: Store): any => ({\n  email: emails.find(({ id }: { id: number }) => id === activeEmail)\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => ({\n  deleteEmail: (id: number): any => {\n    dispatch(deleteEmail(id));\n    dispatch(resetActiveEmail());\n  },\n  toggleEmailRead: (id: number, isRead: boolean): any =>\n    dispatch(setEmailRead({ id, isRead }))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport SvgIcon from \"../SvgIcon\";\nimport { white } from \"../../constants/colors\";\n\nconst Button = styled.button`\n  width: 30px;\n  height: 30px;\n  margin: 0.5rem;\n  padding: 0;\n  background-color: ${white};\n  border: 0;\n  border-radius: 50%;\n`;\n\ninterface ToolbarButtonProps {\n  icon: string;\n  onClick?(): void;\n}\n\nconst ToolbarButton: React.FC<ToolbarButtonProps> = ({ icon, onClick }) => (\n  <Button onClick={onClick}>\n    <SvgIcon category=\"toolbar\" id={icon} size={20} />\n  </Button>\n);\n\nexport default ToolbarButton;\n","import styled from \"styled-components\";\nimport { whiteSmoke } from \"../../constants/colors\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0.5rem;\n`;\n\nexport const Button = styled.div`\n  width: 30px;\n  height: 30px;\n  margin: 0;\n  padding: 0;\n  background-color: ${whiteSmoke};\n`;\n\nexport const Img = styled.img`\n  width: 30px;\n  height: 30px;\n`;\n","import React, { Component } from \"react\";\nimport { ToggleButtonProps, ToggleButtonState } from \"./types\";\nimport { Container, Button, Img } from \"./helper-components\";\nimport toggleOffIcon from \"../../media/icons/toggle-off.svg\";\nimport toggleOnIcon from \"../../media/icons/toggle-on.svg\";\n\nclass ToggleButton extends Component<ToggleButtonProps, ToggleButtonState> {\n  constructor(props: ToggleButtonProps) {\n    super(props);\n\n    this.state = { toggled: props.toggled || false };\n    this.onClickHandler = this.onClickHandler.bind(this);\n  }\n\n  componentDidUpdate(prevProps: any) {\n    if (this.props.id !== prevProps.id) {\n      this.setState((): any => ({ toggled: this.props.toggled }));\n    }\n  }\n\n  onClickHandler() {\n    const { id, onClick } = this.props;\n    const { toggled } = this.state;\n\n    this.setState(() => ({ toggled: !toggled }));\n    onClick && onClick(id, !toggled);\n  }\n\n  render() {\n    const { toggled } = this.state;\n\n    return (\n      <Container>\n        <span>Is read:</span>\n        <Button onClick={this.onClickHandler}>\n          <Img src={toggled ? toggleOnIcon : toggleOffIcon} />\n        </Button>\n      </Container>\n    );\n  }\n}\n\nexport default ToggleButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ToolbarButton from \"../ToolbarButton\";\nimport ToggleButton from \"../ToggleButton\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\ninterface ToolbarProps {\n  id: number;\n  isRead: boolean;\n  onDelete?(): void;\n  onToggleRead?(id: number, isRead: boolean): void;\n}\n\nconst Toolbar: React.FC<ToolbarProps> = ({\n  id,\n  isRead,\n  onDelete,\n  onToggleRead\n}) => (\n  <Container>\n    <ToolbarButton icon=\"delete\" onClick={onDelete} />\n    <ToggleButton id={id} toggled={isRead} onClick={onToggleRead} />\n  </Container>\n);\n\nexport default Toolbar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { jaguar } from \"../../constants/colors\";\n\nconst Container = styled.div`\n  border-radius: 4px;\n  box-shadow: 0px 0px 12px -3px ${jaguar};\n  margin: 0.5rem;\n  padding: 0.5rem;\n`;\n\nconst ContentArea = ({ children }) => <Container>{children}</Container>;\n\nexport default ContentArea;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Toolbar from \"../Toolbar\";\nimport ContentArea from \"../ContentArea\";\nimport { whiteSmoke } from \"../../constants/colors\";\nimport { sans } from \"../../constants/fonts\";\n\nconst Container = styled.div`\n  flex-grow: 1;\n  flex-shrink: 9999;\n  padding: 0.5rem;\n  background-color: ${whiteSmoke};\n`;\n\nconst Subject = styled.h1`\n  font: 700 1rem ${sans};\n  margin: 1rem 0.5rem;\n`;\n\ninterface MessageViewProps {\n  email?: any;\n  deleteEmail?(id: number): void;\n  toggleEmailRead?(id: number, isRead: boolean): void;\n}\n\nconst MessageView: React.FC<MessageViewProps> = ({\n  email = null,\n  deleteEmail,\n  toggleEmailRead\n}) =>\n  email && (\n    <Container>\n      <Toolbar\n        id={email.id}\n        isRead={email.isRead}\n        onDelete={() => deleteEmail && deleteEmail(email.id)}\n        onToggleRead={toggleEmailRead}\n      />\n      <Subject>{email.subject}</Subject>\n      <ContentArea>{email.content}</ContentArea>\n    </Container>\n  );\n\nexport default MessageView;\n","import connect from \"./connect\";\nimport Component from \"./component\";\n\nexport default connect(Component);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport SideBar from \"../SideBar\";\nimport MessageList from \"../MessageList\";\nimport MessageView from \"../MessageView\";\n\nconst AppContainer = styled.div`\n  min-height: 100vh;\n  display: flex;\n  align-items: stretch;\n`;\n\ninterface AppProps {\n  loadData: any;\n}\n\nclass App extends Component<AppProps> {\n  componentDidMount() {\n    this.props.loadData();\n  }\n\n  render() {\n    return (\n      <AppContainer>\n        <SideBar />\n        <MessageList />\n        <MessageView />\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;\n","import connect from \"./connect\";\nimport Component from \"./component\";\n\nexport default connect(Component);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport \"./media/fonts/fonts.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}